!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var r=class{static get(){return fetch("https://api.covid19api.com/summary").then(t=>t.json()).then(t=>t.Countries)}};let o='\n<table class="table is-fullwidth">\n    <thead>\n        <tr>\n            <th style="width:20px;"></th>\n            <th>Country</th>\n            <th style="width:150px;">Total Confirmed</th>\n            <th class="has-text-right" style="width:150px;">Total Deaths</th>\n            <th class="has-text-right" style="width:150px;">Total Recovered</th>\n        </tr>\n    </thead>\n    <tbody>\n        {{rows}}\n    </tbody>\n</table>\n';function a(t){return new Intl.NumberFormat("es-PE").format(t)}var s=function(t){let e=[];return t.sort((t,e)=>e.TotalConfirmed-t.TotalConfirmed).forEach(t=>{e.push(`\n            <tr>\n                <td>\n                    <span class="flag-icon flag-icon-${t.CountryCode.toLowerCase()}"></span>\n                </td>\n                <td>${t.Country}</td>\n                <td class="has-text-right">${a(t.TotalConfirmed)}</td>\n                <td class="has-text-right">${a(t.TotalDeaths)}</td>\n                <td class="has-text-right">${a(t.TotalRecovered)}</td>\n            </tr>\n        `)}),o.replace("{{rows}}",e.join(" "))};class l extends HTMLElement{constructor(){super(),this.render()}render(){r.get().then(t=>{this.innerHTML=s(t)})}}customElements.define("live-covid",l)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,